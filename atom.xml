<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[yangpeng's Blog]]></title>
  <link href="http://yangpengg.github.com/atom.xml" rel="self"/>
  <link href="http://yangpengg.github.com/"/>
  <updated>2012-11-13T15:32:51+08:00</updated>
  <id>http://yangpengg.github.com/</id>
  <author>
    <name><![CDATA[yp]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[View Transition follow Finger]]></title>
    <link href="http://yangpengg.github.com/blog/2012/11/02/view-transition-follow-finger/"/>
    <updated>2012-11-02T11:11:00+08:00</updated>
    <id>http://yangpengg.github.com/blog/2012/11/02/view-transition-follow-finger</id>
    <content type="html"><![CDATA[<p>I use <a href="http://getprismatic.com/">Prismatic</a> as my main reading tool on iphone. I find the view transition of the app is very intresting(you can have a try <a href="https://itunes.apple.com/us/app/prismatic-always-interesting/id551206444?mt=8">here</a>), that i want to know how it does. By google, i find a <a href="http://iappexperience.com/post/23551184719/chromeless">blog</a> and you can get the <a href="https://github.com/dyang/DYNavigationController">source code</a>. With the demo you can swipe the ui to transition, but can&#8217;t let the transition follows your finger. So i decide to write a demo myself.</p>

<p>I put my code on <a href="https://github.com/hermitinhistory/FollowFinger">github</a>, and you can get the most explanation from the blog above.</p>

<p>Finally, big thanks to the author of the blog.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Minhash and LSH]]></title>
    <link href="http://yangpengg.github.com/blog/2012/09/05/minhash-and-lsh/"/>
    <updated>2012-09-05T09:05:00+08:00</updated>
    <id>http://yangpengg.github.com/blog/2012/09/05/minhash-and-lsh</id>
    <content type="html"><![CDATA[<p>本文主要参考<a href="http://i.stanford.edu/~ullman/mmds.html">Mining of Massive Datasets</a>中第三章相关内容。</p>

<h1>Jaccard Similarity</h1>

<p>在推荐系统经常要做相似度计算，其中比较简单的一种是<a href="http://en.wikipedia.org/wiki/Jaccard_index">Jaccard Similarity</a>。Jaccard Similarity描述如下：<br/>
设A,B为两个特征向量，比如为两个user投过票的电影，则</p>

<p><img src="http://upload.wikimedia.org/math/1/8/6/186c7f4e83da32e889d606140fae25a0.png" alt="jaccard" /></p>

<p>J(A,B)的值介于0-1之间，数值越大，相似度越高。</p>

<p>Jaccard相似度计算很简单，但是当特征向量维数很高的时候(比如文档的特征向量经常会上万维)，这个计算也会很耗时，这时通用的方法是降维，Minhash也可以算作针对Jaccard相似度的降维方法。</p>

<h1>Minhash</h1>

<p>Minhash思想是用一个维度比较小的<em>signatures</em>代替原来维度很大的特征向量，而且可以通过计算这个signatures向量Jaccard相似度去估计原来特征向量的Jaccard相似度。</p>

<h2>特征向量的矩阵表示</h2>

<p>如S1 = {a, d}, S2 = {c}, S3 = {b, d, e}, S4 = {a, c, d}，则表示为矩阵：</p>

<p><img src="http://yangpengg.github.com/images/blogpng/matrix-representation.png" alt="Matrix Representation" /></p>

<p>以电商为例，这个矩阵可以解释为：用户S1购买过a,d两个商品，S2购买过c，S3购买过b,d,e，&#8230;</p>

<h2>Minhash计算原理</h2>

<p>为了推荐物品给S1，思路可以是计算出和S1相似的用户，查看这个(些)用户的购买记录，推荐其中S1没有购买过的商品。可以使用Jaccard相似度计算S1的相似用户，但是现在用户的特征向量是5维的，是不是可以使用更少的维度就可以得到Jaccard相似度。</p>

<p>取Element的一个全排列，以beadc为例，这个排列定义了一个hash函数，这个函数的矩阵可以表示：</p>

<p><img src="http://yangpengg.github.com/images/blogpng/permutation.png" alt="a permutation" /></p>

<p>根据这个hash函数，每个特征向量的minhash值定义为：第一个value不为0的Element的值。</p>

<p>从矩阵中可以的得到：<br/>
h(S1) = a, h(S2) = c, h(S3) = b, h(S4) = a</p>

<p>可以取另一个Element的不同的全排列，再进行一次以上的步骤，可以得到一组不同的minhash值。将所有的minhash值组合成矩阵，则新生成的矩阵可以作为新的特征向量。如果只取两个排列的话，则原来的5维特征向量降到了2维。</p>

<h2>计算Minhash</h2>

<p>实际应用中，如果特征维度很高的话，产生一次全排列是很费时的，所以通常并不会通过产生全排列计算minhash值。</p>

<p>如果特征向量为k维，则可以取n个hash函数，将0,1,&#8230;,k-1重新映射到0,1,&#8230;,k-1。类比于全排列，这些hash函数的意义相当于将第r维的特征放到了h(r)维，相当于产生了n个全排列。当然hash函数不可避免会有冲突，但是只要k足够大(如果不够大的话，就不需要minhash了)，而冲突不太多的时候，这个影响可以忽略。</p>

<p>如果以h1,h2,&#8230;,hn表示n个随机hash函数，r表示原矩阵的行数，SIG(i, c)表示为新生成矩阵第i个hash函数(也就是第i行)，第c列的元素。首先设所有SIG中的元素为MAXINT，然后对每一行r作如想处理：</p>

<p><img src="http://yangpengg.github.com/images/blogpng/algo-minhash.png" alt="algo minhash" /></p>

<p>Minhash的python实现：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/usr/bin/env python
</span><span class='line'># -*- coding: utf-8 -*-
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>def minhash(data, hashfuncs):
</span><span class='line'>    '''
</span><span class='line'>        see mining-of-massive-datasets.pdf ch3 minhash for detail
</span><span class='line'>    '''
</span><span class='line'>
</span><span class='line'>    # DEBUG = True
</span><span class='line'>    DEBUG = False
</span><span class='line'>
</span><span class='line'>    rows, cols, sigrows = len(data), len(data[0]), len(hashfuncs)
</span><span class='line'>
</span><span class='line'>    # fucking the shadow copy
</span><span class='line'>    # sigmatrix = [[1000000] * cols] * sigrows
</span><span class='line'>    sigmatrix = []
</span><span class='line'>    for i in range(sigrows):
</span><span class='line'>        sigmatrix.append([10000000] * cols)
</span><span class='line'>
</span><span class='line'>    for r in range(rows):
</span><span class='line'>        hashvalue = map(lambda x: x(r), hashfuncs)
</span><span class='line'>        if DEBUG: print hashvalue
</span><span class='line'>        for c in range(cols):
</span><span class='line'>            if DEBUG: print '-' * 2, r, c
</span><span class='line'>            if data[r][c] == 0:
</span><span class='line'>                continue
</span><span class='line'>            for i in range(sigrows):
</span><span class='line'>                if DEBUG: print '-' * 4, i, sigmatrix[i][c], hashvalue[i]
</span><span class='line'>                if sigmatrix[i][c] &gt; hashvalue[i]:
</span><span class='line'>                    sigmatrix[i][c] = hashvalue[i]
</span><span class='line'>                if DEBUG: print '-' * 4, sigmatrix
</span><span class='line'>
</span><span class='line'>        if DEBUG:
</span><span class='line'>            for xxxxxxx in sigmatrix:
</span><span class='line'>                print xxxxxxx
</span><span class='line'>            print '=' * 30
</span><span class='line'>
</span><span class='line'>    return sigmatrix
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>if __name__ == '__main__':
</span><span class='line'>    def hash1(x):
</span><span class='line'>        return (x + 1) % 5
</span><span class='line'>
</span><span class='line'>    def hash2(x):
</span><span class='line'>        return (3 * x + 1) % 5
</span><span class='line'>
</span><span class='line'>    data = [[1, 0, 0, 1],
</span><span class='line'>            [0, 0, 1, 0],
</span><span class='line'>            [0, 1, 0, 1],
</span><span class='line'>            [1, 0, 1, 1],
</span><span class='line'>            [0, 0, 1, 0]]
</span><span class='line'>
</span><span class='line'>    print minhash(data, [hash1, hash2])</span></code></pre></td></tr></table></div></figure>


<h1>Locality-Sensitive Hashing</h1>

<p>在推荐系统中，通常需要的是与S1 n个最相似的，而不是所有的。<a href="http://en.wikipedia.org/wiki/Locality_sensitive_hashing">Locality-Sensitive Hashing</a>的提出就是为了过滤明显不相似的，以此来减少计算。</p>

<p>假设向量的维度为n，将n维分为b份，称为bands，每份为n/b维。同时存在b个hash函数，每个bands对应一个hash函数，每个hash函数接受n/b个参数，产生一个数值，把相同数值的元素分为一组。</p>

<p>对每个binds中的n/b维特征向量进行hash计算，比如对于{S1, S2, S3, S4}，3个binds而言，第一个binds可能产生的数据为{S1, S2}, {S3}, {S4}，第二个binds为{S1}, {S2, S4}, {S3}，第三个binds为{S1, S3}, {S2, S4}。则为了计算得到和S1最相似的n个，则只需要计算J(S1, S2), J(S1, S3)，这样达到了减少了计算的目的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Setup]]></title>
    <link href="http://yangpengg.github.com/blog/2012/08/21/octopress-setup/"/>
    <updated>2012-08-21T16:02:00+08:00</updated>
    <id>http://yangpengg.github.com/blog/2012/08/21/octopress-setup</id>
    <content type="html"><![CDATA[<p>本来没有写过blog，4月份弄了个vps，顺便在上边搭了个wordpress，原打算是要写些技术类的文章，但是一直也没有这个习惯，所以到现在那上边也只有一篇。现在想把blog放到github上，正好也改用Octopress。</p>

<p>Octopress部署起来也没有什么麻烦，只是有一点要注意，想在github上搭User Page，Repository name必须是username.github.com，比如我的用户名是yangpengg，repository就只能是yangpengg.github.com，其它的都不能正常部署。</p>

<p>主要参考以下内容：</p>

<ul>
<li><p><a href="http://octopress.org/docs/">Octopress Documentation</a></p></li>
<li><p><a href="http://code.dblock.org/octopress-setting-up-a-blog-and-contributing-to-an-existing-one">Octopress: Setting up a Blog and Contributing to an Existing One</a></p></li>
<li><p><a href="https://github.com/echen/echen.github.com/blob/source/_config.yml">echen&#8217;s _config.yml</a></p></li>
</ul>


<p>还是想写点技术文章。</p>
]]></content>
  </entry>
  
</feed>
